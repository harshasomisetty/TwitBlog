* Twitter to Blog
:PROPERTIES:
:LOGGING: nil
:END:
** Premise
Twitter has so much information hidden in it's threads, but navigating them by topic is somewhat hard.

This is my attempt at using Twitter's API o convert a user's account into a essentially a blog, implemented with MERN stack, Deployed as a multi-container Docker app

Link here:[[http://twitblog.xyz/home][Twitblog]]

** Future Features to Implement
*** Data Management
**** load all data into sqlite
**** Auto Update Twitter data
***** write methods to query until latest tweet
***** run as it's own container
**** limit how much data is sent on queries
**** Expand links
***** get and show images
**** get rid of "title" in data scheme
**** Better keywords
***** no pronouns
***** get rid of urls
**** Summary
*** Dev
**** Logging
**** "Maintenence" screen
**** github actions to autoupdate images, deploy to server
**** SSL cert
*** UI
**** Thread Page
***** Thread summary
**** Author Page
***** main topics talked about across threads
**** Reccomendations of similar threads
**** Back button
**** Advanced Search Page 
** Notes
*** Architecture
*** Referencnes

[[https://github.com/fireship-io/tailwind-dashboard/blob/main/src/index.css][This]] was amazing reference while figuring out tailwind
Used [[https://blog.patricktriest.com/text-search-docker-elasticsearch/][this vue and elastic tutorial]] and [[https://blog.logrocket.com/full-text-search-with-node-js-and-elasticsearch-on-docker/][this other tutorial]] to help figure out the MERN stack


For refactoring the app after solidifying my stack, I used [[https://www.section.io/engineering-education/build-and-dockerize-a-full-stack-react-app-with-nodejs-and-nginx/][this]] link. Also, [[https://tiangolo.medium.com/react-in-docker-with-nginx-built-with-multi-stage-docker-builds-including-testing-8cc49d6ec305][this link]] help directly build the app and push into nginx


getting multicontainer to work is so hard, this [[https://stackoverflow.com/questions/68988175/how-to-use-multi-container-docker-in-elastic-beanstalk-using-amazon-linux-2/69045155#69045155][post]] explains someting I found helpful

using nginx as a reverse proxy to get all requests, and channel to right ports
useful link to setup for ports here [[https://www.digitalocean.com/community/tutorials/how-to-secure-a-containerized-node-js-application-with-nginx-let-s-encrypt-and-docker-compose][digital ocean guide]]

