* Twitter to Blog
:PROPERTIES:
:LOGGING: nil
:END:
** Premise
Twitter has so much information hidden in it's threads, but navigating them by topic is somewhat hard.

This is my attempt at using Twitter's API to convert a user's account into a essentially a blog

I'll basically be using the MERN stack, as I realized later
** Plan
  Overall, the plan is to do all the tweet data processing in python, and store data in elasticsearc, and serve results using react
*** Barebones [2/3]
**** DONE Python to manage tweet data [2/2]
***** DONE Algo to get main thread tweets
***** DONE Make Titles of Threads keywords (find with spacy)
**** DONE Mongo to store data and query [2/2]
***** DONE Figure out schema
***** DONE save json data with python
**** TODO React to display Webpage [0/7]
***** NEXT display threads
***** NEXT Display threads per user
***** TODO display each thread in its own page
***** TODO Link each tweet to original page
***** TODO display each thread in a clean card
***** TODO Figure out nice UI
***** TODO Sort threads 

*** Future
**** TODO make spacy phrase finding cleaner by getting rid of numbers and common phrases
**** TODO add engagement metrics, and display best threads at top
***** other options for thread display, sort by newest, oldest, longest, shortest, most famous
** Storing data schemas
*** DB of user
store user id, keywords from all threads,

*** DB of threads
needs to be elasticsearch for speed
each thread will have user id, text, keywords
** Frontend vision

Just planning out how I want the actual frontend to let users do
*** Main page should be a search engine to find threads for a topic
**** will pull up user bio, main tweet, and section of tweet that is appropriate
*** Implement the [[https://www.threadsby.me/its/dickiebush][threads by me]] functionality, where you can go to a user and see all their threads
**** this view will have a bunch of cards, Title on top
** Other notes
Used [[https://blog.patricktriest.com/text-search-docker-elasticsearch/][this vue and elastic tutorial]] and [[https://blog.logrocket.com/full-text-search-with-node-js-and-elasticsearch-on-docker/][this other tutorial]] to help figure out the MERN stack

For refactoring the app after solidifying my stack, I used [[https://www.section.io/engineering-education/build-and-dockerize-a-full-stack-react-app-with-nodejs-and-nginx/][this]] link. Also, [[https://tiangolo.medium.com/react-in-docker-with-nginx-built-with-multi-stage-docker-builds-including-testing-8cc49d6ec305][this link]] help directly build the app and push into nginx

for making a database globally available, found express app.locals from [[I foun][here]]
